train_info: object
{
	train_code: string, 列车编号,如K739
	start: 起点, 3字母站名编码，如北京：BJH
	end: 终点, 和start不会相同
	start_time: string, 列车出发时间, 格式HH:MM, 如23:06
	end_time: string, 类似start_time
	duration: number, 列车耗时, 单位分钟
	ticket_info: object, 列车票信息
	{
		num: object, 用户所需坐席的数量，只有满足用户条件且有票的field才会出现，如{ze_num: 23, yz_num: 321}
		{
			swz_num: number, 商务座数量,
			tz_num: '特等座',
			zy_num: '一等座',
			ze_num: '二等座',
			gr_num: '高级软卧',
			rw_num: '软卧',
			yw_num: '硬卧',
			rz_num: '软座',
			yz_num: '硬座',
			wz_num: '无座',
			qt_num: '其它'
		}
		price: object, 用户所需坐席的价格，单位：角 （所以最后得/10）。除了min_price, 其它field只有满足用户条件且有票的时候才会出现，如{min_price: 321, ze_price: 2310, yz_price: 321}
		{
			min_price: number, 所有票中的最低价格，一定会出现的field
			swz_price: number, 商务座价格,
			tz_price: '特等座',
			zy_price: '一等座',
			ze_price: '二等座',
			gr_price: '高级软卧',
			rw_price: '软卧',
			yw_price: '硬卧',
			rz_price: '软座',
			yz_price: '硬座',
			wz_price: '无座',
			qt_price: '其它'
		}
	}
}

2种情况：

直达路线的数据:
{
	train_info: array[1]
	[
		object, 列车信息，定义见上train_info
	],
	wait_time: array[0] (空数组)
	total_duration: number, 总耗时，单位分钟
}

转车路线的数据:
{
	train_info: array[2]
	[
		object, 第一辆列车信息，定义见上train_info
		object, 第二辆列车信息
	],
	wait_time: array[1]
	[
		number, 等待时间, 单位分钟
	],
	total_duration: number, 总耗时(train_info[0].duration + wait_time[0] + train_info[1].duration)，单位分钟
}

response格式： array，array的每个元素都是以上2种格式之一


算法支持以下几个选项（约束条件）可以供用户输入：
放在request body里
必填												参数名																								参数类型
1. 出发日期											date: 格式：YYYY-MM-DD																				string
2. 起点												start: 3字母站名编码																					string
3. 终点												end: 3字母站名编码																					string
4. 结果按照价格还是时间排序							order_by: "price" or "time"																			string
选填
5. 是否考虑换乘										consider_transfer																					boolean
6. 转车最小等待时间									min_wait_time																						number
7. 转车最大等待时间									max_wait_time																						number
8. 同站换乘or同城换乘								same_station_transfer: true or false																boolean
9. 出发时间区间										start_time_range: 长度为2的number数组，array[0]<=array[1]，number范围为0~24，如[5,24][0,13][0,24]等		array[2]
10. 到达时间区间										end_time_range: 同上																				array[2]
11. 所需票的种类， 共11种类型的票可以制定				seat_type: 格式为长度为11的0-1数组，如[1,1,0,0,1,1,0,0,1,0,1]											array[11]
12. 所需票的张数										ticket_number																						number
13. 花费时间的上限									max_duration																						number
14. 花费钱的上限										max_price																							number
15. 返回的结果数量									max_solutions																						number